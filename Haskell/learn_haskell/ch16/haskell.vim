if exists('g:no_haskell_conceal') || !has('conceal') || &enc != 'utf-8'
    finish
endif

hi! link Conceal Operator

function! s:HSConceal(from, to, name, preserve, word)
    let pattern_ = a:word ? '\<'.a:from.'\>' : a:from
    if !a:preserve
        exe 'syntax match Operator /'.pattern_.'/ conceal cchar='.a:to
        return
    endif
    " only if a:preserve is v:true, a:operator will be used.
    " TODO if a:from has more than one a:from[0] in it, this will fail.
    let hsc = []
    for i in range(len(a:from))
        let l:cchar = i == 0 ? a:to : ' '
        let pat = '/' . a:from[i] . '/'
        exe 'syntax match HSC_' . a:name . string(i) . ' contained ' . pat
                    \ . ' conceal cchar=' . l:cchar
        let hsc += ['HSC_'.a:name.string(i)]
    endfor
    exe 'syntax match HSC_Operator "'.pattern_.'" contains='.join(hsc, ',')
endfunction

let s:symbolList = [
            \      [ 'undefined' , '‚ä•' , 'Undefined' , v:false , v:true  ]
            \ ,    [ 'forall'    , '‚àÄ' , 'Forall'    , v:true  , v:true  ]
            \ ]
            "\ ,    [ '<='        , '‚©Ω' , 'LT'        , v:true  , v:false ]
            "\ ,    [ '>='        , '‚©æ' , 'Gt'        , v:true  , v:false ]
            "\ ,    [ '=='        , '‚â°' , 'Eq'        , v:false , v:false ]
            "\ ,    [ '\/='       , '‚â¢' , 'NotEq'     , v:false , v:false ]

let s:symbolList += [
            \       [ 'reducedPlanckConstant\|planckConstantOver2Pi\|hbar\|hslash', '‚Ñè', 'Hbar', v:false , v:true]
            \ ,     [ 'pi'             , 'œÄ' , 'Pi'            , v:false , v:true  ]
            \ ,     [ 'tau'            , 'œÑ' , 'Tau'           , v:false , v:true  ]
            \ ,     [ 'planckConstant' , '‚Ñé' , 'PlankConstant' , v:false , v:true  ]
            \ ,     [ 'sum'            , '‚àë' , 'Sum'           , v:false , v:true  ]
            \ ,     [ 'product'        , '‚àè' , 'Product'       , v:false , v:true  ]
            \ ,     [ 'sqrt'           , '‚àö' , 'Sqrt'          , v:false , v:true  ]
            \ ,     [ 'not'            , '¬¨' , 'Not'           , v:true  , v:true  ]
            \ ,     [ 'realPart'       , '‚Ñú' , 'RealPart'      , v:true  , v:true  ]
            \ ,     [ 'imagPart'       , '‚Ñë' , 'ImagPart'      , v:true  , v:true  ]
            \ ,     [ '*'              , '‚ãÖ' , 'Multiply'      , v:false , v:false ]
            \ ]

let s:symbolList += [
            \ , [ 'return' , 'Œ∑' , 'Return' , v:false , v:true]
            \ , [ 'join'   , '¬µ' , 'Join'   , v:false , v:true]
            \
            \ ]

"let s:symbolList += [
            "\   ['-<'  , '‚Ü¢' , 'LArrow1' , v:false , v:false ]
            "\ , ['>-'  , '‚Ü£' , 'RArrow1' , v:false , v:false ]
            "\ , ['-<<' , '‚§õ' , 'LArrow2' , v:false , v:false ]
            "\ , ['>>-' , '‚§ú' , 'RArrow2' , v:true  , v:false ]
            "\ ]

let s:symbolList += [
            \       [ '`div`'    , '√∑' , 'Divide'   , v:false , v:false ]
            \ ,     [ 'Either'   , 'ùêÑ' , 'Either'   , v:true  , v:true  ]
            \ ,     [ 'Right'    , 'ùëÖ' , 'Right'    , v:true  , v:true  ]
            \ ,     [ 'Maybe'    , 'ùêå' , 'Maybe'    , v:true  , v:true  ]
            \ ,     [ 'Just'     , 'ùêΩ' , 'Just'     , v:true  , v:true  ]
            \ ,     [ 'Nothing'  , 'ùëÅ' , 'Nothing'  , v:true  , v:true  ]
            \ ,     [ 'True'     , 'ùêì' , 'True'     , v:true  , v:true  ]
            \ ,     [ 'False'    , 'ùêÖ' , 'False'    , v:true  , v:true  ]
            \ ,     [ 'String'   , 'ùêí' , 'String'   , v:true  , v:true  ]
            \ ,     [ 'Text'     , 'ùêì' , 'Text'     , v:true  , v:true  ]
            \ ,     [ 'Bool'     , 'ùîπ'  , 'Bool'     , v:true  , v:true  ]
            \ ,     [ 'Rational' , '‚Ñö'  , 'Rational' , v:true  , v:true  ]
            \ ,     [ 'Integer'  , '‚Ñ§'  , 'Integer'  , v:true  , v:true  ]
            \ ,     [ 'Natural'  , '‚Ñï'  , 'Natural'  , v:true  , v:true  ]
            \ ,     [ 'Nat'      , '‚Ñï'  , 'Nat'      , v:true  , v:true  ]
            \ ,     [ 'Double'   , 'ùîª'  , 'Double'   , v:true  , v:true  ]
            \ ,     [ 'Complex'  , '‚ÑÇ'  , 'Complex'  , v:true  , v:true  ]
            \                                                           ]

"let s:symbolList += [
            "\ ['>>', '‚â´', 'RArrow3', v:false, v:false]
            "\ ]

syntax match Operator "\\\ze[[:alpha:][:space:]_([]" conceal cchar=Œª
syntax match Operator /\s\.\s/ms=s+1,me=e-1 conceal cchar=‚àò

for sym in s:symbolList
    call s:HSConceal(sym[0],sym[1],sym[2],sym[3],sym[4])
endfor

syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)0\ze\_W" conceal cchar=‚Å∞
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)1\ze\_W" conceal cchar=¬π
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)2\ze\_W" conceal cchar=¬≤
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)3\ze\_W" conceal cchar=¬≥
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)4\ze\_W" conceal cchar=‚Å¥
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)5\ze\_W" conceal cchar=‚Åµ
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)6\ze\_W" conceal cchar=‚Å∂
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)7\ze\_W" conceal cchar=‚Å∑
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)8\ze\_W" conceal cchar=‚Å∏
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)9\ze\_W" conceal cchar=‚Åπ
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)a\ze\_W" conceal cchar=·µÉ
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)b\ze\_W" conceal cchar=·µá
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)c\ze\_W" conceal cchar=·∂ú
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)d\ze\_W" conceal cchar=·µà
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)e\ze\_W" conceal cchar=·µâ
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)f\ze\_W" conceal cchar=·∂†
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)g\ze\_W" conceal cchar=·µç
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)h\ze\_W" conceal cchar= ∞
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)i\ze\_W" conceal cchar=‚Å±
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)j\ze\_W" conceal cchar= ≤
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)k\ze\_W" conceal cchar=·µè
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)l\ze\_W" conceal cchar=À°
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)m\ze\_W" conceal cchar=·µê
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)n\ze\_W" conceal cchar=‚Åø
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)o\ze\_W" conceal cchar=·µí
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)p\ze\_W" conceal cchar=·µñ
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)r\ze\_W" conceal cchar= ≥
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)s\ze\_W" conceal cchar=À¢
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)t\ze\_W" conceal cchar=·µó
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)u\ze\_W" conceal cchar=·µò
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)v\ze\_W" conceal cchar=·µõ
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)w\ze\_W" conceal cchar= ∑
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)x\ze\_W" conceal cchar=À£
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)y\ze\_W" conceal cchar= ∏
syntax match hsNiceOperator "\(\*\*\|\^\|\^\^\)z\ze\_W" conceal cchar=·∂ª
